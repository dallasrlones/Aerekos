(function(rickJ, fs, openSyntax, closeSyntax, RenderCache){
    
    var dirPath = process.cwd();
    
    function TemplateLocation(path){
        dirPath += "/" + path + "/";
        console.log(dirPath);
    }
    
    function UseThisSyntax(openTag, closeTag){
        openSyntax = openTag;
        closeSyntax = closeTag;
    }
    
    var StaticServer = function(location, req, res){
        
        fs.readFile(location + req.url, function(err,data){
            if(err){
                return res.end("<h1>404 Not Found</h1>");
            }
            
            res.end(data.toString());
        });
        
    };
    
    
    function CheckRenderCache(filePath, model){
        var render = RenderCache.filter(function(value){
            return value.filePath == filePath;
        })[0];
        if(!render){
            return false;
        } else {
            if(JSON.stringify(render.model) != JSON.stringify(model)){
                return false;
            }
            return render.content;
        }
    }
    
    function ReadFile(filePath, model){
        var render = CheckRenderCache(filePath,model);
        if(render != false){
            return render;
        }
        return ParseFile(fs.readFileSync(filePath, "utf-8"), model);
    }
    
    function ReadTemplate(filePath, model){
        var render = CheckRenderCache(filePath,model);
        if(render != false){
            return render;
        }
        return ParseFile(fs.readFileSync(dirPath + 
                            filePath, "utf-8"), model);
    }
    
    //model.batman
    function CheckForModelTag(commands, model){
        if(commands.indexOf("model.") != -1 && commands.indexOf("foreach") == -1){
            var splitCommands = commands.split(".");

                var contents = model[splitCommands[1]];
                if(typeof(contents) != 'undefined'){
                    return contents;
                }

                console.log("Error with your model expression");
                console.log(splitCommands[1] + " is not in your model \n");
                return "";
        }
    }
    
    //template | home2.html
    function CheckForTemplateTag(commands, model){
        if(commands.indexOf("template") != -1){
            var splitCommands = commands.split("|")[1].trim();
            
            var fileName = dirPath + splitCommands;
            
            try{
                var template = fs.readFileSync(fileName, "utf-8");
                return template;
            } catch(err){
                console.log("Error with your tempate expression");
                console.log("Cannot find " + fileName + "\n");
                return "";
            }
        }
    }
    
    //foreach | model.batList | home2.html
    function CheckForForeachTag(commands, model){
        
        if(commands.indexOf("foreach") != -1){
            var splitCommands = commands.split("|");
            var list = splitCommands[1].split(".")[1].trim();
            var template = splitCommands[2].trim();

            var content = "";
            
                var listModel = model[list];
                if(typeof(listModel) != 'undefined'){
                    for(var i in listModel){
                        content += ReadTemplate(template, listModel[i]) + "\n";
                    }
                    return content;
                }
                
                console.log("Error with your foreach expression");
                console.log(list + " is not in your model \n");
                return "";
            
        }
        
    }
    
    //<^@ 1 + 1 ^>
    function CheckForEvalTag(commands, model){
        
        if(commands.indexOf("@") != -1){
            commands = commands.trim().slice(1, commands.length);
            try{
                var expression = eval(commands);
                if(expression){
                    return expression;
                }
            } catch(err){
                console.log("Error with your @expression");
                console.log(err.message + "\n");
                return "";
            }
        }
        
    
    }
    
    function ParseFile(contents, model){
        var openTag = "<^";
        var closeTag = "^>";
        var openBrackets = openSyntax;
        var closeBrackets = closeSyntax;
        
        var startPos = contents.indexOf(openTag, 0);
        var endPos = contents.indexOf(closeTag, 0);
        
        if(startPos == -1 && endPos == -1){
            openTag = openSyntax;
            closeTag = closeSyntax;
            
            startPos = contents.indexOf(openBrackets, 0);
            endPos = contents.indexOf(closeBrackets, 0);
            
            if(startPos == -1 && endPos == -1){
                return contents;
            }
        }
        
        var start = contents.slice(0, startPos);
        var commands = contents.slice(startPos + openTag.length, endPos).trim();
        var end = contents.slice(endPos + closeTag.length, contents.length);
        
        var modelVal = CheckForModelTag(commands, model);
        var templateVal = CheckForTemplateTag(commands, model);
        var foreachVal = CheckForForeachTag(commands, model);
        var evalVal = CheckForEvalTag(commands, model);
        
        contents = start + 
                    (modelVal || "") + 
                    (templateVal || "") + 
                    (foreachVal || "") +
                    (evalVal || "") +
                    end;
        
        return ParseFile(contents, model);
    }
    
    rickJ.ReadFile = ReadFile;
    rickJ.ReadTemplate = ReadTemplate;
    rickJ.TemplateLocation = TemplateLocation;
    rickJ.UseThisSyntax = UseThisSyntax;
    rickJ.StaticServer = StaticServer;
    
})(
    module.exports,
    require('fs'),
    "<^",
    "^>",
    []
);