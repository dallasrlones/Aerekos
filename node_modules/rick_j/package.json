{
  "name": "rick_j",
  "version": "1.5.9",
  "description": "Amazing awesome templating engine / template engine that allows you to template any language and return it as a string. Pass in a model and use the custom syntax to watch it do magic.",
  "main": "index.js",
  "scripts": {},
  "author": {
    "name": "Dallas Lones",
    "email": "dallasrlones@gmail.com",
    "url": "http://dallasrlones.com/"
  },
  "keywords": [
    "Template Engine",
    "Templating Engine",
    "Basic Node Server",
    "File Template",
    "File Templating"
  ],
  "license": "ISC",
  "dependencies": {
    "fs": "0.0.2"
  },
  "_id": "rick_j@1.5.9",
  "_shasum": "53cfc19084b8e4b397b0915353a3f3262d78d7fb",
  "_from": "rick_j@>=1.5.7 <2.0.0",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "dallaslones",
    "email": "dallasrlones@gmail.com"
  },
  "maintainers": [
    {
      "name": "dallaslones",
      "email": "dallasrlones@gmail.com"
    }
  ],
  "dist": {
    "shasum": "5be59dbc669b2dba54dd4634688659b3b08814f8",
    "tarball": "http://registry.npmjs.org/rick_j/-/rick_j-1.5.7.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/rick_j/-/rick_j-1.5.7.tgz",
  "_nodeVersion": "4.1.2",
  "readme": "![Rick_J Logo](http://aerekos.herokuapp.com/RJ.jpg)\n\n## I'm Rick James...\n\nRick_J makes it extremely easy to pass in a model\nto a template file of any language or extentsion\nyou choose. Rick_J is part of a collection of software I'm\nreleasing soon that will gerneate a full stack for you based\noff of the model passed in. More coming soon!\n\nRick_J is open source and help from the community would be loved.\n\nIf you are a fan of Rick_J and would like to see more open source software please donate to my bitcoin address :\n\n    1FV6mKkNfMR6WdfdLcYDGgtXTJV7ZpQaEC\n    \nRick_J will now Cache files as to not do IO every request.\n\n## How to install rick_j\n\n```bash\n$ npm install rick_j --save\n```\n\n## Using Rick_J\n\n```js\nvar RJ = require(\"rick_j\");\nRJ.TemplateLocation(\"templates\");\nvar model = {\n    Name: \"SuperDude\",\n    Power: \"Bowling\"\n};\nvar file = RJ.ReadTemplate(\"superHeroTemplate.html\", model);\n```\n\n## Rick_J Methods\n\n  * RJ.TemplateLocation(\"folderLocation\");\n  * RJ.ReadTemplate(\"templatelocation\", model);\n  * RJ.ReadFile(\"filelocation\", model);\n  * RJ.StaticServer(\"folderLocation\", req, res);\n  * RJ.UseThisSyntax(\"{{\", \"}}\");\n    \n## Rick_J Template Methods\n\n  * <^@ console.log(model); ^>\n  * <^ template | SuperDude.html ^>\n  * <^ foreach | model.heroList | SuperDude.html ^>\n  * <^ model.SupderDude ^>\n    \n## You can inject this syntax into any language or file. Ex:\n\n## Html File\n\n```html\n<body>\n    <script>alert(\"<^ model.SuperDudeName ^>\");</script>\n    <h1><^ model.SuperDudeName ^></h1>\n    <p><^ model.SuperDudeBio ^></p>\n    <div>\n    \n    <^@ if(true){ ReadTemplate(\"superHero.html\",{ }); } else { \n        ReadTemplate(\"superVillian.html\", { }); }  ^>\n    \n    </div>\n</body>\n```\n\n## JS File\n\n```js\nvar RJ = require(\"rick_j\");\nRJ.TemplateLocation(\"templates\");\nvar model = {\n    SuperDudeName : \"TheDude\",\n    SuperDudeBio : \"This guy loves to bowl and has a very stinky carpet.\"\n};\nvar file = RJ.ReadTemplate(\"heroPage.html\", model);\n```\n\n## Coplex Object\n\n```js\nvar RJ = require(\"rick_j\");\nRJ.TemplateLocation(\"templates\");\nvar model = {\n    Name: \"SuperDude\"\n    Friends : [\n    {\n        Name: \"SuperFriend1\",\n        Bio: \"I like pie\",\n        FavoriteFood : [{ FoodName: \"regular pie\"},{FoodName:\"awesome pie\"}]\n    }, \n    {\n        Name: \"SuperFriend2\",\n        Bio: \"I love pie\",\n        FavoriteFood : [{ FoodName: \"big pie\"},{FoodName:\"super pie\"}]\n    }]\n};\nvar file = RJ.ReadTemplate(\"Profile\", model);\n```\n\n## Profile.html\n\n```html\n<body>\n    <h1><^ model.Name ^></h1>\n    <p><^ foreach | model.Friends |  Friend.html ^></p>\n</body>\n```\n    \n## Friend.html\n\n```html\n<h3><^ model.Name ^></h3>\n<label>Bio:</label>\n<p><^ model.Bio ^></p>\n</br>\n<label>Fav Food:</label>\n<^ foreach | model.FavoriteFood | FavFood.html ^>\n```\n## FavFood.html\n\n```html\n<p><^ model.FoodName ^></p>\n```\n\n## NodeJS Server\n\n## Server.js\n\n```js\n(function(http, RJ){\n    \n    const PORT = process.env.PORT;\n    const HOST = process.env.IP;\n    \n    RJ.TemplateLocation(\"templates\");\n    \n    function RequestHandler(req,res){\n        if(req.url.toLowerCase() == \"/home\"){\n            var model = {\n                Title: \"Home Page\",\n                Description : \"Awesome Home Page\"\n            };\n            res.end(RJ.ReadTemplate(\"Home.html\", model));\n        }\n    }\n    \n    var server = http.createServer(RequestHandler);\n    \n    server.listen(PORT, HOST, function(){\n        console.log(\"Server On\");\n    });\n    \n})(\n    require(\"http\"),\n    require(\"rick_j\")\n);\n```\n## Home.html\n\n```html\n<html>\n    <head>\n        <title><^ model.Title ^></title>\n    </head>\n    <body>\n        <h1><^ model.Title ^></h1>\n        <p><^ model.Description ^></p>\n    </body>\n</html>\n```\n## NodeJS Server to Client\n\n## Server.js\n```js\n(function(http, RJ){\n    \n    const PORT = process.env.PORT;\n    const HOST = process.env.IP;\n    \n    RJ.TemplateLocation(\"templates\");\n    \n    function RequestHandler(req,res){\n        if(req.url.toLowerCase() == \"/home\"){\n            var model = {\n                Title: \"Home Page\",\n                Description : \"Awesome Home Page\"\n            };\n            res.end(RJ.ReadTemplate(\"Home.html\", model));\n        }\n    }\n    \n    var server = http.createServer(RequestHandler);\n    \n    server.listen(PORT, HOST, function(){\n        console.log(\"Server On\");\n    });\n    \n})(\n    require(\"http\"),\n    require(\"rick_j\")\n);\n```\n\n## Home.html\n\n```html\n<html>\n    <head>\n        <title><^ model.Title ^></title>\n    </head>\n    <body>\n        <h1><^ model.Title ^></h1>\n        <p id=\"DescriptionTag\"></p>\n    </body>\n    <script type=\"text/javascript\">\n        //CLEAN YOUR DATA BEFORE YOU SEND\n        //DO NOT SEND PASSWORDS... = SAD PANDA\n        \n        var model = JSON.parse('<^@ JSON.stringify(model) ^>');\n        console.log(model);\n        document.getElementById(\"DescriptionTag\").innerHTML = model.Description;\n    </script>\n</html>\n```\n## DOCS -------------\n\n## RJ.StaticServer(\"yourFolder\", req, res);\n\n    Sets your static file location for external files.\n    \n## StaticServer Ex:\n\n## server.js\n\n```js\nvar http = require(\"http\");\nconst PORT = process.env.PORT;\nconst IP = process.env.IP;\nvar RJ = require(\"rick_j\");\nRJ.TemplateLocation(\"templates\");\n\nvar RequestHandler = function(req,res){\n    \n    RJ.StaticServer(\"public\", req,res);\n    \n    if(req.url == \"/\"){\n        res.end(RJ.ReadTemplate(\"home.html\", { }));\n    }\n};\n\nhttp.createServer(RequestHandler).listen(PORT,IP,function(){\n    console.log(\"server on\");\n});\n```\n\n## home.html\n\n```html\n<script src=\"script.js\"></script>\n```\n\n## RJ.ReadTemplate(\"templatelocation\", model);\n\n    Reads a template file of any .extension and outputs a string with a \n    model injected into the file\n    \n## ReadTemplate Ex:\n\n```js\nRJ.ReadTemplate(\"home.html\", { title: \"Home\", welcomeMessage: \"Welcome\" });\n```\n\n## RJ.ReadFile(\"filelocation\", model);\n\n    Same as ReadTemplate yet reads from a different file location outside of \n    the templates folder, still in development yet works fairly well\n    \n## ReadFile Ex:\n\n```js\nRJ.ReadFile(\"newlocation/catsanddogs/batfile.js\", { bat: \"man\" });\n```\n\n## UseThisSyntax\n\n    Use the syntax passed in, params 1: startTag 2: endTag\n    \n## UseThisSyntax Ex:\n\n```js\n\nRJ.UseThisSyntax(\"<rick>\",\"<james>\");\n\nRJ.ReadTemplate(\"home.html\", { james: \"james\"});\n\n```\n\n## home.html\n\n```html\n\n<rick>model.james<james>\n\n```\n\n## Template Commands\n\n## Evaluate <^@ ^>\n\n    Executes javascript inside of your node function that called the \n    ReadTemplate() You can then bind things using model.yourstuff. Passing\n    a conditional statement allows us to dynamically render views.\n\n## Evaluate <^@ ^> Ex:\n\n```html\n<div>\n    <^@ if(true){ ReadTemplate(\"superHero.html\",{ }); } else { \n        ReadTemplate(\"superVillian.html\", { }); }  ^>\n</div>\n```\n\n## <^ template | home.html ^>\n\n    Loads another file from the templates folder with a passed in model\n\n## Template Ex:\n\n```html\n<^ template | home.html ^>\n```\n\n## home.html\n\n```html\n<^ model.name ^>\n```\n\n## <^ foreach | model.coolList | list.html ^>\n\n    Does a foreach loop with the passed in model variable, each itteration\n    of the loop repeats a template supplied\n    \n## Foreach Ex:\n\n```html\n<^ foreach. | model.coolList | list.html ^>\n```\n\n## list.html\n\n```html\n<^ model.name ^>\n```",
  "readmeFilename": "README.md"
}
